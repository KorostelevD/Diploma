import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";
import "./Auth.css";

const STEPS = {
  EMAIL: 'email',
  LOGIN: 'login',
  REGISTER: 'register'
};

export const DynamicAuth = () => {
  const [currentStep, setCurrentStep] = useState(STEPS.EMAIL);
  const [email, setEmail] = useState("");
  const [formData, setFormData] = useState({
    password: "",
    displayName: "",
    phone: "",
    confirmPassword: ""
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [isCheckingUser, setIsCheckingUser] = useState(false);
  
  const { 
    login, 
    register, 
    forgotPassword, 
    checkUser, 
    loading, 
    error, 
    clearError, 
    isAuthenticated 
  } = useAuth();
  
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated) {
      navigate("/profile");
    }
  }, [isAuthenticated, navigate]);

  useEffect(() => {
    if (error) {
      clearError();
    }
    setFormErrors({});
  }, [formData, email]);

  const handleEmailSubmit = async (e) => {
    e.preventDefault();
    
    if (!email) {
      setFormErrors({ email: "–í–≤–µ–¥—ñ—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É" });
      return;
    }

    if (!/\S+@\S+\.\S+/.test(email)) {
      setFormErrors({ email: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏" });
      return;
    }

    setIsCheckingUser(true);
    
    try {
      const result = await checkUser(email);
      
      if (result.success) {
        if (result.exists) {
          setCurrentStep(STEPS.LOGIN);
        } else {
          setCurrentStep(STEPS.REGISTER);
          setFormData(prev => ({ ...prev, email: email }));
        }
      } else {
        setFormErrors({ email: result.error });
      }
    } catch (error) {
      setFormErrors({ email: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
    } finally {
      setIsCheckingUser(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.password) {
      setFormErrors({ password: "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å" });
      return;
    }

    const result = await login(email, formData.password);
    
    if (result.success) {
      navigate("/profile");
    }
  };

  const validateRegistrationForm = () => {
    const errors = {};

    if (!formData.displayName.trim()) {
      errors.displayName = "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    }

    if (!formData.phone.trim()) {
      errors.phone = "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!/^\+?[\d\s\-\(\)]{10,}$/.test(formData.phone.replace(/\s/g, ''))) {
      errors.phone = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É";
    }

    if (!formData.password) {
      errors.password = "–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (formData.password.length < 6) {
      errors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤";
    }

    if (!formData.confirmPassword) {
      errors.confirmPassword = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
    } else if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å";
    }

    return errors;
  };

  const handleRegistrationSubmit = async (e) => {
    e.preventDefault();
    
    const errors = validateRegistrationForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    const result = await register(email, formData.password, formData.displayName, formData.phone);
    
    if (result.success) {
      navigate("/profile");
    }
  };

  const handleForgotPassword = async () => {
    const result = await forgotPassword(email);
    
    if (result.success) {
      alert(result.message);
    } else {
      alert(result.error);
    }
  };

  const handleBackToEmail = () => {
    setCurrentStep(STEPS.EMAIL);
    setFormData({
      password: "",
      displayName: "",
      phone: "",
      confirmPassword: ""
    });
    setFormErrors({});
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  if (currentStep === STEPS.EMAIL) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">–ü–æ—á–Ω–µ–º–æ –∑ –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏</h1>
            <p className="auth-subtitle">
              –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —É –≤–∞—Å —É–∂–µ —î –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å. –Ø–∫—â–æ –Ω—ñ, –º–∏ —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–∏–π.
            </p>
          </div>

          <form onSubmit={handleEmailSubmit} className="auth-form">
            <div className="auth-form-group">
              <label htmlFor="email" className="auth-form-label">
                –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className={`auth-form-input ${formErrors.email ? 'error' : ''}`}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É"
                required
              />
              {formErrors.email && (
                <span className="field-error">{formErrors.email}</span>
              )}
            </div>

            <button
              type="submit"
              className="auth-submit-btn"
              disabled={isCheckingUser || !email}
            >
              {isCheckingUser ? "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ..." : "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"}
            </button>
          </form>
        </div>
      </div>
    );
  }

  if (currentStep === STEPS.LOGIN) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!</h1>
            <h2 className="auth-subtitle">–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å</h2>
            <p className="auth-description">
              –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ —ñ—Å–Ω—É—é—á–∏–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å.
            </p>
            <p className="auth-email">{email}</p>
          </div>

          <form onSubmit={handleLoginSubmit} className="auth-form">
            <div className="auth-form-group">
              <label htmlFor="password" className="auth-form-label">
                –ü–∞—Ä–æ–ª—å
              </label>
              <div className="password-input-container">
                <input
                  type={showPassword ? "text" : "password"}
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  className={`auth-form-input ${formErrors.password ? 'error' : ''}`}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å"
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={togglePasswordVisibility}
                  aria-label={showPassword ? "–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å"}
                >
                  {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              {formErrors.password && (
                <span className="field-error">{formErrors.password}</span>
              )}
            </div>

            {error && (
              <div className="error-message">
                {error}
              </div>
            )}

            <div className="form-actions">
              <button
                type="button"
                className="forgot-password-link"
                onClick={handleForgotPassword}
              >
                –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?
              </button>
            </div>

            <button
              type="submit"
              className="auth-submit-btn"
              disabled={loading || !formData.password}
            >
              {loading ? "–í—Ö–æ–¥–∏–º–æ..." : "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"}
            </button>
          </form>

          <div className="auth-footer">
            <p className="auth-footer-text">
              –ù–µ –≤–∞—à email?{" "}
              <button
                type="button"
                className="auth-link-btn"
                onClick={handleBackToEmail}
              >
                –ó–º—ñ–Ω–∏—Ç–∏
              </button>
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (currentStep === STEPS.REGISTER) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É</h1>
            <p className="auth-subtitle">
              –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
            </p>
            <p className="auth-email">{email}</p>
          </div>

          <form onSubmit={handleRegistrationSubmit} className="auth-form">
            <div className="auth-form-group">
              <label htmlFor="displayName" className="auth-form-label">
                –Ü–º'—è
              </label>
              <input
                type="text"
                id="displayName"
                name="displayName"
                value={formData.displayName}
                onChange={handleInputChange}
                className={`auth-form-input ${formErrors.displayName ? 'error' : ''}`}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                required
              />
              {formErrors.displayName && (
                <span className="field-error">{formErrors.displayName}</span>
              )}
            </div>

            <div className="auth-form-group">
              <label htmlFor="phone" className="auth-form-label">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className={`auth-form-input ${formErrors.phone ? 'error' : ''}`}
                placeholder="+380 XX XXX XX XX"
                required
              />
              {formErrors.phone && (
                <span className="field-error">{formErrors.phone}</span>
              )}
            </div>

            <div className="auth-form-group">
              <label htmlFor="password" className="auth-form-label">
                –ü–∞—Ä–æ–ª—å
              </label>
              <div className="password-input-container">
                <input
                  type={showPassword ? "text" : "password"}
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  className={`auth-form-input ${formErrors.password ? 'error' : ''}`}
                  placeholder="–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={togglePasswordVisibility}
                  aria-label={showPassword ? "–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å"}
                >
                  {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              {formErrors.password && (
                <span className="field-error">{formErrors.password}</span>
              )}
            </div>

            <div className="auth-form-group">
              <label htmlFor="confirmPassword" className="auth-form-label">
                –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
              </label>
              <div className="password-input-container">
                <input
                  type={showConfirmPassword ? "text" : "password"}
                  id="confirmPassword"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleInputChange}
                  className={`auth-form-input ${formErrors.confirmPassword ? 'error' : ''}`}
                  placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={toggleConfirmPasswordVisibility}
                  aria-label={showConfirmPassword ? "–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å"}
                >
                  {showConfirmPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              {formErrors.confirmPassword && (
                <span className="field-error">{formErrors.confirmPassword}</span>
              )}
            </div>

            {error && (
              <div className="error-message">
                {error}
              </div>
            )}

            <button
              type="submit"
              className="auth-submit-btn"
              disabled={loading}
            >
              {loading ? "–†–µ—î—Å—Ç—Ä—É—î–º–æ..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å"}
            </button>
          </form>

          <div className="auth-footer">
            <p className="auth-footer-text">
              –ù–µ –≤–∞—à email?{" "}
              <button
                type="button"
                className="auth-link-btn"
                onClick={handleBackToEmail}
              >
                –ó–º—ñ–Ω–∏—Ç–∏
              </button>
            </p>
          </div>
        </div>
      </div>
    );
  }

  return null;
}; 